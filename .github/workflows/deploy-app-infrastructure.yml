name: Deploy Application Infrastructure

on:
  workflow_dispatch:

env:
  RESOURCE_GROUP_NAME: "AspNetSix"
  RESOURCE_GROUP_LOCATION: "centralus"
  AZURE_TENANT_ID: "6567301b-7e83-403a-a15f-56d9dc59f19c"

jobs:
    build-and-deploy:
      runs-on: ubuntu-latest
      steps:
        
        # Checkout code
      - uses: actions/checkout@main

        # Log into Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - uses: Azure/get-keyvault-secrets@v1
        with: 
            keyvault: "AspNetSixSharedKeyVault"
            secrets: 'SqlServerAdminPassword, SqlServerAdminUsername, SqlServerAADLoginName, SqlServerAADLoginOID'
        id: getSqlSecrets

      - name: Create resource group if not exists
        uses: Azure/CLI@v1
        with:
            inlineScript: |
              if $(az group exists --name ${{ env.RESOURCE_GROUP_NAME }}) ; then
                echo "Azure resource group already exists, skipping creation..."
              else
                az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location ${{ env.RESOURCE_GROUP_LOCATION }}
                echo "Azure resource group created"
              fi    

        # Deploy ARM template
      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        id: deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./Deploy/azuredeploy.json
          parameters: ./Deploy/azuredeploy.parameters.json sqlAdminUsername=${{ steps.getSqlSecrets.outputs.SqlServerAdminUsername }} sqlAdminPassword=${{ steps.getSqlSecrets.outputs.SqlServerAdminPassword }} sqlAADAdminLoginName=${{ steps.getSqlSecrets.outputs.SqlServerAADLoginName }} sqlAADAdminLoginOID=${{ steps.getSqlSecrets.outputs.SqlServerAADLoginOID }}
          
      - name: Give App Service, secret read permission on Key Vault
        uses: Azure/CLI@v1
        with:
            inlineScript: |
              az keyvault set-policy --name ${{ steps.deploy.outputs.keyVaultName }} --spn ${{ steps.deploy.outputs.appServicePrincipalId }} --secret-permissions get
          
            
